# vim:filetype=conf

set shell zsh
set shellopts '-euy'

set mouse
set icons
set hidden
set drawbox
set roundbox
set dirfirst
set dircounts
set info size
set ignorecase
set number
set relativenumber
set anchorfind!

set ifs "\n"
set period 1
set tabstop 4
set scrolloff 10

set cutfmt "\033[1;7;31m"
set copyfmt "\033[1;7;33m"
set selectfmt "\033[1;7;35m"
set tagfmt "\033[1;7;93m"
set errorfmt "\033[1;31m"
set borderfmt "\033[2;34m"
set cursorpreviewfmt "\033[7m"
set promptfmt "\033[1;32m%u \033[0;34m%d\033[1;31m%f"

set truncatechar "â€¦"
set dupfilefmt "%f.~%n"

set preview
set cleaner ~/.config/lf/cleaner
set previewer ~/.config/lf/preview

# -------------------- mappings --------------------

map R reload
map <f-2> $$EDITOR $XDG_CONFIG_HOME/lf/lfrc

map o open
map E filexplore
map i $$PAGER "$f"
map O $$EDITOR "$f"
map S &xdg-open "$f"
map X &lf -remote "send $id &$f"

map x cut
map y copy
map p pasta
map d delete
map e rename
map r :rename; cmd-end
map b bmv

map ay cp-add
map aY cp-rm
map ar cut-add
map aR cut-add
map aC selxybuf
map ac selxybuf-add

map af touch
map ad mkdir
map <a-n> bundle
map gy copy-path
map al symlink
map gl follow_link

map au zip
map aU extract

map ae xplus
map aE xminus
map aH chmod

map <a-b> select-ft
map <a-p> select-pt
map V invert-below
map D select-dirs
map F select-files

map <a-k> half-up
map <a-j> half-down
map <a-i> scroll-up
map <a-e> scroll-down

map K :updir; set dironly true; up; set dironly!; open
map J :updir; set dironly true; down; set dironly!; open

map \\ zi
map <a-f> fzf_dir
map <a-F> fzf_dir1
map <a-s> fzf_file
map <a-S> fzf_file1
map <a-r> $rgf

map <a-.> jump-next
map <a-,> jump-prev
map <a-t> term-tab
map <a-T> tmux-tab

map <a-u> hists
map <a-g> &dragon -x -a $fx
map <f-3> &ffplay -loop 0 $f
map U !exec dust || exec du -h

map ` !true # cmds output
map <c-l> $printf "\033[2J\033[H" # clear output
map <c-space> toggle-preview

map <c-z> $ kill -STOP $PPID
map <esc> :read; cmd-escape
map . :read; cmd-history-prev; cmd-enter

# -------------------- general --------------------

# auto size column
${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    else
        lf -remote "send $id set ratios 1:2:3"
    fi
}}

cmd on-cd &{{ zoxide add "$PWD" }}

cmd on-select &{{
    lf -remote "send $id :set statfmt \"$(eza -ld --color=always "$f" | sed 's/\/\w.*$//')\""
}}

cmd on-quit &{{
    sort -u ~/.local/share/lf/history -o ~/.local/share/lf/history
}}

cmd toggle-preview &{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

map se :{{ set sortby ext; set info size; }}
map sn :{{ set sortby natural; set info size; }}

# -------------------- files --------------------

cmd open ${{
    case $(file --mime-type -Lb "$f") in
        text/*|application/(*json|*desktop)) $EDITOR "$f";;
        *) setsid -f xdg-open "$f";;
    esac
}}

cmd touch %{{
    printf '\e[1;32m%b\e[0m' " file name: "; read file
    [ -w "$PWD" ] && touch $file || lf -remote "send $id $ sudo -u root touch $file"
    lf -remote "send $id select \"$file\""
}}

cmd mkdir %{{
    printf '\e[1;32m%b\e[0m' " folder name: "; read folder
    [ -w "$PWD" ] && mkdir $folder || lf -remote "send $id $ sudo -u root mkdir $folder"
    lf -remote "send $id select \"$folder\""
}}

cmd bundle %{{
    set -f
    printf '\e[1;32m%b\e[0m' " folder name: "; read ned
    [ -w "$PWD" ] && mkdir "$ned" || lf -remote "send $id $ sudo -u root mkdir \"$ned\""
    [ -w "$PWD" ] && mv $fx "$ned" || lf -remote "send $id $ sudo mv $fx $ned"
}}

cmd del %{{
    set -f
    o=$(head -n1 <<< "$fx")
    if [[ $(stat -c '%U' "$o") == "$USER" ]]; then
        lf -remote "send $id delete"
    else
        lf -remote "send $id $ sudo rm -rf $fx"
    fi
}}

cmd pasta &{{
    if [ -w "$PWD" ]; then
        lf -remote "send $id paste"
    else
        lf -remote "send $id pastsu"
    fi
}}

cmd pastsu ${{
    set $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) sudo cp -r "$@" .;;
        move) sudo mv -n "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd symlink %{{
    for f in $fx; do
        ln -s $f "$f link"
    done
}}

cmd follow_link %{{
    lf -remote "send $id select '$(realpath $f)'"
}}

cmd copy-path &{{
    [[ $XDG_SESSION_TYPE == "x11" ]] && CLIP="xclip -selection clipboard" || CLIP="wl-copy"
    printf '%s' "$fx" | $CLIP
}}

# bulk rename
cmd bmv ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [[ -n "$fs" ]] && fs="$(basename -a $fs)" || fs="$(ls)"
    printf '%b\n' "$fs" > "$old" > "$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv "$src" "$dst"
    done
    rm "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd zip ${{
    printf "\033[2J\033[1;1H"
    echo "1 7z 2 zip 3 rar 4 tar 5 tar.gz 6 tar.xz 7 tar.bz2" | xargs -n2
    printf '\e[1;34m%b\e[0m' "enter type: "; read d
    case $t in
        1) 7zz a $fx; t=7z;;
        2) zip -r "$fx" $fx; t=zip;;
        3) rar a "$fx.rar" $fx; t=zip;;
        4) tar -cvf "$fx.tar" $fx; t=tar;;
        5) tar -cvzf "$fx.tar.gz" $fx; t=tar.gz;;
        6) tar -cvzf "$fx.tar.xz" $fx; t=tar.xz;;
        7) tar -cvjf "$fx.tar.bz2" $fx; t=tar.bz2;;
    esac
    lf -remote "send $id select \"$fx.$t\""
}}

cmd extract ${{
    set -f
    for c in "$fx"; do
        case "$c" in
            *.7z) 7zz x "$c";;
            *.zip) unzip "$c";;
            *.rar) unrar x "$c";;
            *.tar) tar -xf "$c";;
            *.tar.gz|*.tgz|) tar -xzvf "$c";;
            *.tar.xz|*.txz) tar -xJvf "$c";;
            *.tar.bz2) tar -xjvf "$c";;
            *.gz) gzip -dk "$c";;
        esac
    done
    lf -remote "send $id reload"
}}

cmd select-files &{{
    get_files() {
        if [ "$lf_hidden" = 'true' ]; then
            find -mindepth 1 -maxdepth 1 -type f -print0
        else
            find -mindepth 1 -maxdepth 1 -type f ! -name '.*' -print0
        fi |
        xargs -0 printf ' %q'
    }
    lf -remote "send $id :unselect; toggle $(get_files)"
}}

cmd select-dirs &{{
    get_dirs() {
        if [ "$lf_hidden" = 'true' ]; then
            find -maxdepth 1 -type d ! -name '.' -print0
        else
            find -maxdepth 1 -type d ! -name '.*' -print0
        fi |
        xargs -0 printf ' %q'
    }
    lf -remote "send $id :unselect; toggle $(get_dirs)"
}}

cmd select-ft %{{
    printf '\e[1;32m%b\e[0m' " filetype: "; read ft
    arr=('*''.'"$ft")
    get_ft() {
        if [ "$lf_hidden" = 'true' ]; then
            find -maxdepth 1 -type f -name "${arr[@]}" -print0
        else
            find -maxdepth 1 -type f -name "${arr[@]}" ! -path '*/.*' -print0
        fi |
        xargs -0 printf ' %q'
    }
    lf -remote "send $id :unselect; toggle $(get_ft)"
}}

cmd select-pt %{{
    printf '\e[1;32m%b\e[0m' " pattern: "; read pt
    arr=('.''*'"$pt"'.''*')
    get_pt() {
        if [ "$lf_hidden" = 'true' ]; then
            find -maxdepth 1 -regex "${arr[@]}" -print0
        else
            find -maxdepth 1 -regex "${arr[@]}" ! -name '.*' -print0
        fi |
        xargs -0 printf ' %q'
    }
    lf -remote "send $id :unselect; toggle $(get_pt)"
}}

cmd cut-add %{{
    sed -i '1s/.*/move/' ~/.local/share/lf/files
    printf '%s\n' "$fx" >> ~/.local/share/lf/files
    lf -remote "send $id :unselect; sync"
}}

cmd cut-rm %{{
    sed -i '1s/.*/move/' ~/.local/share/lf/files
    printf '%s\n' "$fx" | while IFS= read -r file; do
        sed -i "\|$file|d" ~/.local/share/lf/files
    done
    lf -remote "send $id :unselect; sync"
}}

cmd cp-add %{{
    sed -i '1s/.*/copy/' ~/.local/share/lf/files
    printf '%s\n' "$fx" >> ~/.local/share/lf/files
    lf -remote "send $id :unselect; sync"
}}

cmd cp-rm %{{
    sed -i '1s/.*/copy/' ~/.local/share/lf/files
    printf '%s\n' "$fx" | while IFS= read -r file; do
        sed -i "\|$file|d" ~/.local/share/lf/files
    done
    lf -remote "send $id :unselect; sync"
}}

cmd selxybuf &{{
    files="$(sed -n 's/\\/\\\\/g;s/"/\\"/g;s/^/"/;s/$/"/;2,$p' ~/.local/share/lf/files | tr '\n' ' ')"
    if [ -z "$files" ]; then
        lf -remote "send $id echoerr select-buffer: no file in copy/cut buffer"
        exit
    fi
    lf -remote "send $id :unselect; toggle $files"
}}

cmd selxybuf-add &{{
    set -- $(cat ~/.local/share/lf/files)
    shift
    if [ "$#" -eq 0 ]; then
        lf -remote "send $id echoerr select-buffer: no file in copy/cut buffer"
        exit
    fi
    files="$(printf '%s\n' "$@" $fs | sort -u | sed 's/\\/\\\\/g;s/"/\\"/g;s/^/"/;s/$/"/' | tr '\n' ' ')"
    lf -remote "send $id :unselect; toggle $files"
}}

# -------------------- permissions --------------------

cmd xplus &{{
    chmod +x $fx
    lf -remote "send $id reload"
}}

cmd xminus &{{
    chmod -x $fx
    lf -remote "send $id reload"
}}

cmd chmod %{{
    printf '\e[1;32m%b\e[0m' " mode bits: "; read c
    for file in "$fx"; do
        chmod $c $file
    done
    lf -remote "send $id reload"
}}

# -------------------- nav --------------------

cmd term-tab &{{
    case $(file --mime-type -Lb "$f") in
        inode/directory) c="$f" ;;
        *) c="$PWD";;
    esac
    kitty @launch --type=tab --cwd="$c"
}}

cmd tmux-tab &{{
    case $(file --mime-type -Lb "$f") in
        inode/directory) c="$f" ;;
        *) c="$PWD";;
    esac
    tmux new-window; cd "$c"
}}

cmd filexplore &{{
    nautilus file:"$PWD" &>/dev/null
}}

cmd hists ${{
    a="$(< ~/.local/share/lf/history | fzf --preview '' --border --padding=1 )" || true
    m="$(echo $a | cut -b 1)"
    d="$(echo $a | cut -b 2- | sed 's/ //')"
    if [[ "$a" && "$m" && "$d" ]]; then
        lf -remote "send $id $m$d"
    fi
}}

cmd zi ${{
    folder="$(zoxide query -l | fzf --header='jump to...' --border --padding=1)" || true
    lf -remote "send $id cd \"$folder\""
}}

cmd fzf_dir ${{
    folder="$(fd -t d -LH | fzf --header='cd into ...' --border --padding=1)" || true
    lf -remote "send $id cd \"$folder\""
}}

cmd fzf_dir1 ${{
    folder="$(fd -t d -d 1 -LH | fzf --header='cd into ...' --border --padding=1)" || true
    lf -remote "send $id cd \"$folder\""
}}

cmd fzf_file ${{
    file="$(fd -t f -LH | fzf --header='files â€¦' --border --padding=1)" || true
    lf -remote "send $id select \"$file\""
}}

cmd fzf_file1 ${{
    file="$(fd -t f -d 1 -LH | fzf --header='files â€¦' --border --padding=1)" || true
    lf -remote "send $id select \"$file\""
}}
