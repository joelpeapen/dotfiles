# vim:filetype=conf

set shell zsh
set shellopts '-euy'

set mouse
set icons
set hidden
set drawbox
set dirfirst
set dircounts
set info size
set ignorecase

set number
set relativenumber
set cursorpreviewfmt "\033[7m"
set promptfmt "\033[32m%u \033[34m%d\033[0m%f"

set ifs "\n"
set period 1
set tabstop 4
set scrolloff 10

set preview
set cleaner ~/.config/lf/cleaner
set previewer ~/.config/lf/previewer

# -------------------- MAPPINGS --------------------

map <!> shell
map i $less -f "$f"

map o open
map E open
map x cut
map X run
map y copy
map p paste
map P fcp
map d delete
map e rename
map r :rename; cmd-end
map b bulkmv

map af touch
map ad mkdir
map <a-n> newfold
map al %ln -s $f "${f} link"

map au zip
map aU extract

map ae xplus
map aE xminus
map aH chmod

map D select-dirs
map F select-files
map <c-s> select-ft

map L bottom
map R reload
map <a-k> half-up
map <a-j> half-down
map <a-f> scroll-up
map <a-h> scroll-down
map K :updir; set dironly true; up; set dironly false; open
map J :updir; set dironly true; down; set dironly false; open

map \\ zi
map sf filexplore
map f fzf_jump
map <a-s> fzf_file
map <a-r> fzf_search

map <a-t> kitty-tab
map <a-T> tmux-tab
map <c-z> $ kill -STOP $PPID

map zp toggle-preview

map ~ cd ~
map ` !true # previous cmds output
map <a-p> hists
map <esc> :read; cmd-escape
map . :read; cmd-history-prev; cmd-enter
map <f-2> $$EDITOR $XDG_CONFIG_HOME/lf/lfrc

# -------------------- GENERAL --------------------

# auto size column
${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

cmd on-cd &{{
    zoxide add "$PWD"
    lf -remote 'send reload'
}}

cmd on-select &{{
    lf -remote "send $id :set statfmt \"$(eza -ld --color=always "$f" | sed 's/\/\w.*$//')\""
}}

cmd on-quit &{{
    < ~/.local/share/lf/history | sort | uniq | tee > ~/.local/share/lf/hists
}}

cmd toggle-preview &{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

# -------------------- FILES --------------------

cmd open ${{
    case $(file --mime-type -Lb "$f") in
        text/*|application/json) $EDITOR "$f";;
        *) xdg-open "$f" &>/dev/null &;;
    esac
}}

cmd run &{{ lf -remote "send $id &$f" }}

cmd fcp &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) fcp "$@" "$PWD";;
        move) mv -n "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd touch %{{
    printf " file name: "
    read file
    touch $file
    lf -remote "send $id select \"$file\""
}}

cmd mkdir %{{
    printf " folder name: "
    read folder
    mkdir $folder
    lf -remote "send $id select \"$folder\""
}}

cmd newfold %{{
    set -f
    printf " folder name: "
    read ned
    mkdir -- "$ned"
    mv -- $fx "$ned"
}}

cmd delete %{{
    set -f
    printf " delete? [y/n]: "
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# bulk rename
cmd bulkmv ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [[ -n "$fs" ]] && fs="$(basename -a $fs)" || fs="$(ls)"
    printf '%b\n' "$fs" > "$old" > "$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd select-files &{{
    get_files() {
        if [ "$lf_hidden" = 'true' ]; then
            find . -mindepth 1 -maxdepth 1 -type f -print0
        else
            find . -mindepth 1 -maxdepth 1 -type f -not -name '.*' -print0
        fi |
        xargs -0 printf ' %q'
    }
    lf -remote "send $id :unselect; toggle $(get_files)"
}}

cmd select-dirs &{{
    get_dirs() {
        if [ "$lf_hidden" = 'true' ]; then
            find . -maxdepth 1 -type d -print0
        else
            find . -maxdepth 1 -type d -not -name '.*' -print0
        fi |
        xargs -0 printf ' %q'
    }
    lf -remote "send $id :unselect; toggle $(get_dirs)"
}}

cmd select-ft %{{
    printf " filetype: "; read ft
    arr=('*''.'"$ft")
    get_ft() {
        if [ "$lf_hidden" = 'true' ]; then
            find . -maxdepth 1 -type f -name "${arr[@]}" -print0
        else
            find . -maxdepth 1 -type f -name "${arr[@]}" -not -path '*/.*' -print0
        fi |
        xargs -0 printf ' %q'
    }
    lf -remote "send $id :unselect; toggle $(get_ft)"
}}

cmd zip ${{
    printf "\033[2J\033[1;1H"
    printf "1. tar\n2. tar.gz\n3. tar.bz2\n4. zip\n"
    printf "\nEnter type: "
    read ans
    printf "\nEnter name: "
    read n
    case $ans in
        1) tar -cvf "$n.tar" $fx; t=tar;;
        2) tar -cvzf "$n.tar.gz" $fx; t=tar.gz;;
        3) tar -cvjf "$n.tar.bz2" $fx; t=tar.bz2;;
        4) zip -r "$n" $fx; t=zip;;
    esac
    lf -remote "send $id select \"$n.$t\""
}}

cmd extract &{{
    set -f
    for file in "$fx"; do
        case "$file" in
            *.tar) tar -xf "$file" -C "$PWD";;
            *.zip) unzip "$file" -d "$PWD";;
            *.rar) unrar x "$file" "$PWD";;
            *.7z) 7z x "$file" -o "$PWD";;
            *.tar.bz2) tar -xjvf "$file" -C "$PWD";;
            *.tar.gz|*.tgz) tar -xzvf "$file" -C "$PWD";;
            *.tar.xz|*.txz) tar -xJvf "$file" -C "$PWD";;
        esac
    done
    lf -remote "send reload"
    lf -remote "send $id select ${file%%.*}"
}}

# -------------------- PERMISSIONS --------------------

cmd xplus &{{
    chmod 775 $fx
    lf -remote 'send reload'
}}

cmd xminus &{{
    chmod 664 $fx
    lf -remote 'send reload'
}}

cmd chmod %{{
    printf "Mode Bits: "
    read ans
    for file in "$fx"; do
        chmod $ans $file
    done
    lf -remote 'send reload'
}}

# -------------------- NAV --------------------

cmd tmux-tab &{{
    case $(file --mime-type -Lb "$f") in
        inode/directory) c="$f" ;;
        *) c="$(dirname "$(readlink -f "$f")")";;
    esac
    tmux new-window; cd "$c"
}}

cmd kitty-tab &{{
    case $(file --mime-type -Lb "$f") in
        inode/directory) c="$f" ;;
        *) c="$(dirname "$(readlink -f "$f")")";;
    esac
    kitty @launch --type=tab --cwd="$c"
}}

cmd filexplore &{{
    nautilus file:"$PWD" &>/dev/null &;
}}

cmd hists ${{
    a="$(< ~/.local/share/lf/hists | fzf --preview '')" || true
    m="$(echo $a | cut -b 1)"
    d="$(echo $a | cut -b 2- | sed 's/ //')"
    if [[ "$a" && "$m" && "$d" ]]; then
        lf -remote "send $id $m$d"
    fi
}}

cmd zi ${{
    folder="$(zoxide query -l | fzf --preview 'eza --color=always {} | bat' --height=~50%)" || true
    lf -remote "send $id cd \"$folder\""
}}

cmd fzf_jump ${{
    folder="$(fd -t d -LH | fzf --preview 'eza -l --color=always {} | bat' --header='cd into …')" || true
    lf -remote "send $id cd \"$folder\""
}}

cmd fzf_file ${{
    file="$(fd -t f -LH | fzf --preview 'bat -r :500 {}' --header='files …')" || true
    lf -remote "send $id select \"$file\""
}}

cmd fzf_search ${{
    c="rg --no-heading"
    a="$(fzf --bind "change:reload:$c {q} || true" \
         --ansi --preview '' --header 'Search in files')" || true
    if [[ -n "$a" ]]; then
        IFS=':' read -r file line char _ <<< "$a"
        lf -remote "send $id select \"$file\""
        "$EDITOR" "$file" +"$line" -c "norm ${char}lh"
    fi
}}
